{"version":3,"sources":["webpack:///./src/js/shaders/all.js","webpack:///./src/app.js","webpack:///./src/js/mainWagner.js"],"names":["VolumetericLightShader","uniforms","tDiffuse","value","lightPosition","THREE","Vector3","exposure","decay","density","weight","samples","vertexShader","join","fragmentShader","AdditiveBlendingShader","tAdd","BadTVShader","type","time","distortion","distortion2","speed","rollSpeed","Main","classCallCheck_default","this","OCCLUSION_LAYER","DEFAULT_LAYER","window","three","setupCanvas","createScene3d","createPostProcessing","addEventListener","resizeCanvas","bind","onMouseMove","animate","canvas","document","querySelector","renderer","scene","camera","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","setSize","aspect","updateProjectionMatrix","setAttribute","style","width","height","composer","occlusionComposer","ambientLight","add","load","alphaSolidTexture","geometry","material","color","alphaMap","transparent","lightSphere","layers","set","occlusionPlane","position","z","y","frontMaterial","plane","occlusionRenderTarget","dist_default","a","addPass","dist","volumetricPass","shaders_all","needsSwap","additivePass","texture","renderToScreen","badTVPass","tick","setClearColor","render","requestAnimationFrame","event","x","clientX","clientY","TweenMax","to","ease","easeOut","rotation"],"mappings":"mKAAA,IAAMA,GAWJC,UACEC,UAAWC,MAAM,MACjBC,eAAgBD,MAAO,IAAIE,EAAMC,QAAQ,GAAK,IAAM,MACpDC,UAAWJ,MAAO,KAClBK,OAAQL,MAAO,MACfM,SAAUN,MAAO,IACjBO,QAASP,MAAO,IAChBQ,SAAUR,MAAO,KAGnBS,cACE,oBACA,gBACE,YACA,4EACF,KACAC,KAAK,MAEPC,gBACE,oBACA,8BACA,8BACA,0BACA,uBACA,yBACA,wBACA,uBACA,+BACA,cACA,IACE,uBACA,kDACA,oDACA,8CACA,iCACA,qCACA,IACE,oBACE,SACF,IACA,8BACA,+CACA,wCACA,mBACA,8BACF,IACA,mCACF,KACAD,KAAK,OAGHE,GACJd,UACEC,UAAYC,MAAM,MAClBa,MAAQb,MAAM,OAGhBS,cACE,oBACA,gBACE,YACA,4EACF,KACAC,KAAK,MAEPC,gBACE,8BACA,0BACA,oBACA,gBACE,2CACA,qCACA,8BACF,KACAD,KAAK,OAsCHI,MAzBFJ,KAAK,OAGL,oBACA,wBACA,wBACA,wBACA,wBACA,uBACA,2BACA,gBACE,YACA,oCACA,wCACA,wDACA,uDACA,uDACA,sDACA,wCACA,yEACF,KACAA,KAAK,OAKRZ,UACCC,UAAegB,KAAM,IAAKf,MAAO,MACjCgB,MAAYD,KAAM,IAAKf,MAAO,GAC9BiB,YAAkBF,KAAM,IAAKf,MAAO,GACpCkB,aAAkBH,KAAM,IAAKf,MAAO,GACpCmB,OAAgBJ,KAAM,IAAKf,MAAO,IAClCoB,WAAkBL,KAAM,IAAKf,MAAO,KAErCS,cACC,oBACA,gBACA,YACA,4EACA,KACCC,KAAK,MACPC,gBACC,8BACA,sBACA,4BACA,6BACA,uBACA,2BACA,oBAEA,wBACA,iDACA,IACA,wBACA,iDACA,IACA,yBACA,qCACA,IACA,uBACA,MACA,mEACA,mEACA,gEACA,0DACA,wCACA,sCACA,aACA,0DACA,iCACA,iBACA,8DACA,4DACA,sCACA,uFACA,cACA,cACA,2CACA,2BACA,8BACA,sBACA,gEACA,YACA,wCACA,2CACA,8BACA,IAEA,gBA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","file":"static/js/app.b9adda8136068f05b238.js","sourcesContent":["const VolumetericLightShader = {\n  // uniforms: {\n  //   tDiffuse: {value:null},\n  //   lightPosition: {value: new THREE.Vector3(0.5, 0.5, -400.0)},\n  //   exposure: {value: 0.18},\n  //   decay: {value: 0.95},\n  //   density: {value: 0.8},\n  //   weight: {value: 0.4},\n  //   samples: {value: 100}\n  // },\n\n  uniforms: {\n    tDiffuse: {value:null},\n    lightPosition: {value: new THREE.Vector3(0.5, 0.5, -400.0)},\n    exposure: {value: 0.18},\n    decay: {value: 0.965},\n    density: {value: 0.8},\n    weight: {value: 0.4},\n    samples: {value: 90}\n  },  \n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n      \"vUv = uv;\",\n      \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"varying vec2 vUv;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform vec2 lightPosition;\",\n    \"uniform float exposure;\",\n    \"uniform float decay;\",\n    \"uniform float density;\",\n    \"uniform float weight;\",\n    \"uniform int samples;\",\n    \"const int MAX_SAMPLES = 100;\",\n    \"void main()\",\n    \"{\",\n      \"vec2 texCoord = vUv;\",\n      \"vec2 deltaTextCoord = texCoord - lightPosition;\",\n      \"deltaTextCoord *= 1.0 / float(samples) * density;\",\n      \"vec4 color = texture2D(tDiffuse, texCoord);\",\n      \"float illuminationDecay = 1.0;\",\n      \"for(int i=0; i < MAX_SAMPLES; i++)\",\n      \"{\",\n        \"if(i == samples){\",\n          \"break;\",\n        \"}\",\n        \"texCoord -= deltaTextCoord;\",\n        \"vec4 sample = texture2D(tDiffuse, texCoord);\",\n        \"sample *= illuminationDecay * weight;\",\n        \"color += sample;\",\n        \"illuminationDecay *= decay;\",\n      \"}\",\n      \"gl_FragColor = color * exposure;\",\n    \"}\"\n  ].join(\"\\n\")\n};\n\nconst AdditiveBlendingShader = {\n  uniforms: {\n    tDiffuse: { value:null },\n    tAdd: { value:null }\n  },\n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n      \"vUv = uv;\",\n      \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform sampler2D tAdd;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n      \"vec4 color = texture2D( tDiffuse, vUv );\",\n      \"vec4 add = texture2D( tAdd, vUv );\",\n      \"gl_FragColor = color + add;\",\n    \"}\"\n  ].join(\"\\n\")\n};\n\n\n\nconst FXAAShader = {\n  uniforms: {\n    tDiffuse: { type: 't', value: null },\n    resolution: { type: 'v2', value: null }\n  },\n\n  vertexShader: [\n\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"varying vec2 vUv;\",\n    \"varying vec2 v_rgbNW;\",\n    \"varying vec2 v_rgbNE;\",\n    \"varying vec2 v_rgbSW;\",\n    \"varying vec2 v_rgbSE;\",\n    \"varying vec2 v_rgbM;\",\n    \"uniform vec2 resolution;\",\n    \"void main() {\",\n      \"vUv = uv;\",\n      \"vec2 fragCoord = uv * resolution;\",\n      \"vec2 inverseVP = 1.0 / resolution.xy;\",\n      \"v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\",\n      \"v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\",\n      \"v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\",\n      \"v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\",\n      \"v_rgbM = vec2(fragCoord * inverseVP);\",\n      \"gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\",\n    \"}\"\n  ].join(\"\\n\")  \n}\n\n\nconst BadTVShader = {\n\tuniforms: {\n\t\t\"tDiffuse\": \t{ type: \"t\", value: null },\n\t\t\"time\": \t\t{ type: \"f\", value: 0.0 },\n\t\t\"distortion\":   { type: \"f\", value: 3.0 },\n\t\t\"distortion2\":  { type: \"f\", value: 5.0 },\n\t\t\"speed\":     \t{ type: \"f\", value: 0.2 },\n\t\t\"rollSpeed\":    { type: \"f\", value: 0.1 },\n\t},\n\tvertexShader: [\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\"vUv = uv;\",\n\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\t].join(\"\\n\"),\n\tfragmentShader: [\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform float time;\",\n\t\t\"uniform float distortion;\",\n\t\t\"uniform float distortion2;\",\n\t\t\"uniform float speed;\",\n\t\t\"uniform float rollSpeed;\",\n\t\t\"varying vec2 vUv;\",\n\t\t// Start Ashima 2D Simplex Noise\n\t\t\"vec3 mod289(vec3 x) {\",\n\t\t\"  return x - floor(x * (1.0 / 289.0)) * 289.0;\",\n\t\t\"}\",\n\t\t\"vec2 mod289(vec2 x) {\",\n\t\t\"  return x - floor(x * (1.0 / 289.0)) * 289.0;\",\n\t\t\"}\",\n\t\t\"vec3 permute(vec3 x) {\",\n\t\t\"  return mod289(((x*34.0)+1.0)*x);\",\n\t\t\"}\",\n\t\t\"float snoise(vec2 v)\",\n\t\t\"  {\",\n\t\t\"  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\",\n\t\t\"                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\",\n\t\t\"                     -0.577350269189626,  // -1.0 + 2.0 * C.x\",\n\t\t\"                      0.024390243902439); // 1.0 / 41.0\",\n\t\t\"  vec2 i  = floor(v + dot(v, C.yy) );\",\n\t\t\"  vec2 x0 = v -   i + dot(i, C.xx);\",\n\t\t\"  vec2 i1;\",\n\t\t\"  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\",\n\t\t\"  vec4 x12 = x0.xyxy + C.xxzz;\",\n\t\t\" x12.xy -= i1;\",\n\t\t\"  i = mod289(i); // Avoid truncation effects in permutation\",\n\t\t\"  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\",\n\t\t\"\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\",\n\t\t\"  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\",\n\t\t\"  m = m*m ;\",\n\t\t\"  m = m*m ;\",\n\t\t\"  vec3 x = 2.0 * fract(p * C.www) - 1.0;\",\n\t\t\"  vec3 h = abs(x) - 0.5;\",\n\t\t\"  vec3 ox = floor(x + 0.5);\",\n\t\t\"  vec3 a0 = x - ox;\",\n\t\t\"  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\",\n\t\t\"  vec3 g;\",\n\t\t\"  g.x  = a0.x  * x0.x  + h.x  * x0.y;\",\n\t\t\"  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\",\n\t\t\"  return 130.0 * dot(m, g);\",\n\t\t\"}\",\n\t\t// End Ashima 2D Simplex Noise\n\t\t\"void main() {\",\n\t\t\t\"vec2 p = vUv;\",\n\t\t\t\"float ty = time*speed;\",\n\t\t\t\"float yt = p.y - ty;\",\n\t\t\t//smooth distortion\n\t\t\t\"float offset = snoise(vec2(yt*3.0,0.0))*0.2;\",\n\t\t\t// boost distortion\n\t\t\t\"offset = offset*distortion * offset*distortion * offset;\",\n\t\t\t//add fine grain distortion\n\t\t\t\"offset += snoise(vec2(yt*50.0,0.0))*distortion2*0.001;\",\n\t\t\t//combine distortion on X with roll on Y\n\t\t\t\"gl_FragColor = texture2D(tDiffuse,  vec2(fract(p.x + offset),fract(p.y-time*rollSpeed) ));\",\n\t\t\"}\"\n\t].join(\"\\n\")\n};\n\n\nconst BleachBypassShader = {\n\tuniforms: {\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\":  { value: 1.0 }\n\t},\n\tvertexShader: [\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\t].join( \"\\n\" ),\n\tfragmentShader: [\n\t\t\"uniform float opacity;\",\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\t\"vec4 base = texture2D( tDiffuse, vUv );\",\n\t\t\t\"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\n\t\t\t\"float lum = dot( lumCoeff, base.rgb );\",\n\t\t\t\"vec3 blend = vec3( lum );\",\n\t\t\t\"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\n\t\t\t\"vec3 result1 = 2.0 * base.rgb * blend;\",\n\t\t\t\"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\n\t\t\t\"vec3 newColor = mix( result1, result2, L );\",\n\t\t\t\"float A2 = opacity * base.a;\",\n\t\t\t\"vec3 mixRGB = A2 * newColor.rgb;\",\n\t\t\t\"mixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\n\t\t\t\"gl_FragColor = vec4( mixRGB, base.a );\",\n\t\t\"}\"\n\t].join( \"\\n\" )\n};\n\n\nconst VerticalBlurShader = {\n\tuniforms: {\n\t\t\"tDiffuse\": { value: null },\n\t\t\"v\":        { value: 10.0 / 512.0 }\n\t},\n\tvertexShader: [\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\t].join( \"\\n\" ),\n\tfragmentShader: [\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform float v;\",\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\t\"vec4 sum = vec4( 0.0 );\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\",\n\t\t\t\"gl_FragColor = sum;\",\n\t\t\"}\"\n\t].join( \"\\n\" )\n};\n\n\nconst HorizontalBlurShader = {\n\tuniforms: {\n\t\t\"tDiffuse\": { value: null },\n\t\t\"h\":        { value: 1.0 / 512.0 }\n\t},\n\tvertexShader: [\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\t].join( \"\\n\" ),\n\tfragmentShader: [\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform float h;\",\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\t\"vec4 sum = vec4( 0.0 );\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\",\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\",\n\t\t\t\"gl_FragColor = sum;\",\n\t\t\"}\"\n\t].join( \"\\n\" )\n};\n\nexport { AdditiveBlendingShader, VolumetericLightShader, FXAAShader, BadTVShader, BleachBypassShader, VerticalBlurShader, HorizontalBlurShader }\n\n\n// WEBPACK FOOTER //\n// ./src/js/shaders/all.js","import './css/style.css'\nimport Main from './js/mainWagner'\n\n// eslint-disable-next-line\nnew Main();\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","import * as THREE from 'three';\nimport EffectComposer, { RenderPass, ShaderPass, CopyShader } from 'three-effectcomposer-es6';\nimport { VolumetericLightShader,\n  BadTVShader,\n  BleachBypassShader,\n  AdditiveBlendingShader, \n  VerticalBlurShader} from './shaders/all.js';\nimport { TweenMax, Quint } from 'gsap';\nimport fxaa from 'three-shader-fxaa';\n\nexport default class Main {\n\n  constructor () {\n    this.OCCLUSION_LAYER = 1;\n    this.DEFAULT_LAYER = 0;\n\n    window.THREE = THREE;\n\n    this.setupCanvas();\n    this.createScene3d();\n    this.createPostProcessing();\n    // this.resizeCanvas();\n    window.addEventListener('resize', this.resizeCanvas.bind(this));\n    window.addEventListener('mousemove', this.onMouseMove.bind(this));\n\n    this.animate();\n  }\n\n  setupCanvas() { \n    this.canvas = document.querySelector('#canvas');\n    this.renderer = new THREE.WebGLRenderer({ canvas: canvas });\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    this.renderer.setPixelRatio( window.devicePixelRatio );\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  }\n\n  resizeCanvas() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n    this.canvas.setAttribute('width', window.innerWidth);\n    this.canvas.setAttribute('height', window.innerHeight);\n    this.canvas.style.width = `${window.innerWidth}px`;\n    this.canvas.style.height = `${window.innerHeight}px`;\n    this.composer.setSize( window.innerWidth, window.innerHeight );\n    this.occlusionComposer.setSize( window.innerWidth, window.innerHeight );\n  }\n\n  createScene3d() {\n\n    const ambientLight = new THREE.AmbientLight(0x2c3e50);\n    this.scene.add(ambientLight);\n\n    // const pointLight = new THREE.PointLight(0xffffff);\n    // this.scene.add(pointLight);\n\n    const alphaGradientTexture = new THREE.TextureLoader().load('/static/textures/alpha_gradient.jpg');\n    const alphaSolidTexture = new THREE.TextureLoader().load('/static/textures/alpha.jpg');    \n    \n    let geometry = new THREE.PlaneBufferGeometry( 1, 1, 1 );\n    let material = new THREE.MeshBasicMaterial( { color: 0xffffff, alphaMap: alphaSolidTexture  } );\n    material.transparent = true;\n    this.lightSphere = new THREE.Mesh( geometry, material );\n    this.lightSphere.layers.set( this.OCCLUSION_LAYER );\n    this.scene.add( this.lightSphere );\n    \n    geometry = new THREE.PlaneBufferGeometry(1, 1, 1);\n  \n\n\n    material = new THREE.MeshBasicMaterial( { color:0x000000, alphaMap: alphaSolidTexture } );\n    material.transparent = true;\n    this.occlusionPlane = new THREE.Mesh(geometry, material);\n    this.occlusionPlane.position.z = 2;\n    this.occlusionPlane.position.y = -0;\n    this.occlusionPlane.layers.set( this.OCCLUSION_LAYER );\n    // this.scene.add( this.occlusionPlane );\n    \n    const frontMaterial = new THREE.MeshBasicMaterial( { color:0x0000, alphaMap: alphaSolidTexture } );\n    frontMaterial.transparent = true;\n    this.plane = new THREE.Mesh( geometry, frontMaterial );\n    this.plane.position.z = 2;\n    this.plane.layers.set( this.DEFAULT_LAYER );\n    \n    this.scene.add( this.plane );\n\n    \n    this.camera.position.z = 4;\n    window.camera = this.camera;\n  }\n\n\n  createPostProcessing() {\n    let pass;\n    \n    // occlusion render target\n    this.occlusionRenderTarget = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\n    this.occlusionComposer = new EffectComposer( this.renderer, this.occlusionRenderTarget);\n    // add a scene render pass\n    this.occlusionComposer.addPass( new RenderPass( this.scene, this.camera ) );\n\n    // volumeteric light\n    const volumetricPass = new ShaderPass( VolumetericLightShader );\n    volumetricPass.needsSwap = false;\n    this.occlusionComposer.addPass( volumetricPass );\n    \n    // a second composer and render pass for the lit scene\n    this.composer = new EffectComposer( this.renderer );\n    this.composer.addPass( new RenderPass( this.scene, this.camera ) );\n\n\n    const additivePass = new ShaderPass( AdditiveBlendingShader );\n    window.occlusionRenderTarget = this.occlusionRenderTarget;\n    additivePass.uniforms.tAdd.value = window.occlusionRenderTarget.texture;\n    this.composer.addPass( additivePass );\n    additivePass.renderToScreen = true;\n\n\n    // this.occlusionComposer.addPass ( new ShaderPass(fxaa()) );\n    // this.occlusionComposer.addPass ( new ShaderPass(BleachBypassShader) );\n    // this.occlusionComposer.addPass ( new ShaderPass(VerticalBlurShader) );\n    this.badTVPass =  new ShaderPass( BadTVShader );\n    // this.occlusionComposer.addPass ( this.badTVPass );\n  }\n\n  animate(tick) {\n    this.camera.layers.set(this.OCCLUSION_LAYER);\n    this.renderer.setClearColor(0x000000);\n    this.occlusionComposer.render();\n    \n    this.camera.layers.set(this.DEFAULT_LAYER);\n    this.renderer.setClearColor(0x000000);\n    this.composer.render();  \n    window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  onMouseMove (event) {\n    const x = ((event.clientX - (window.innerWidth / 2)) / window.innerWidth);\n    const y = ((event.clientY - (window.innerHeight / 2)) / window.innerHeight);\n\n    TweenMax.to(this.lightSphere.position, 10, { x: x, y: -y, ease: Quint.easeOut });\n    TweenMax.to(this.occlusionPlane.rotation, 10, { y: x, x: y, ease: Quint.easeOut });\n    TweenMax.to(this.occlusionPlane.position, 10, { x: x, y: -y, ease: Quint.easeOut });\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/mainWagner.js"],"sourceRoot":""}